==68780== Memcheck, a memory error detector
==68780== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==68780== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==68780== Command: /home/student/Desktop/OS/HW1/skeleton_smash/smash
==68780== Parent PID: 68776
==68780== 
==68780== Invalid write of size 1
==68780==    at 0x4C34E0D: strcpy (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==68780==    by 0x10CF58: ChangeDirCommand::execute() (Commands.cpp:460)
==68780==    by 0x10F120: SmallShell::executeCommand(char const*) (Commands.cpp:916)
==68780==    by 0x1109A1: main (smash.cpp:51)
==68780==  Address 0x5b822bf is 0 bytes after a block of size 15 alloc'd
==68780==    at 0x4C3289F: operator new[](unsigned long) (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==68780==    by 0x10CF2E: ChangeDirCommand::execute() (Commands.cpp:459)
==68780==    by 0x10F120: SmallShell::executeCommand(char const*) (Commands.cpp:916)
==68780==    by 0x1109A1: main (smash.cpp:51)
==68780== 
==68780== 
==68780== FILE DESCRIPTORS: 6 open at exit.
==68780== Open file descriptor 1: /home/student/Desktop/OS/HW1/skeleton_smash/tests/outputs/test_2020_timeout.out
==68780==    at 0x54EF957: dup2 (syscall-template.S:78)
==68780==    by 0x1108F8: main (smash.cpp:41)
==68780== 
==68780== Open file descriptor 0:
==68780==    at 0x54EF957: dup2 (syscall-template.S:78)
==68780==    by 0x1108A6: main (smash.cpp:33)
==68780== 
==68780== Open file descriptor 5:
==68780==    at 0x54EF927: dup (syscall-template.S:78)
==68780==    by 0x110A67: __static_initialization_and_destruction_0(int, int) (smash.cpp:9)
==68780==    by 0x110A83: _GLOBAL__sub_I_stdout_dp (smash.cpp:57)
==68780==    by 0x110AFC: __libc_csu_init (in /home/student/Desktop/OS/HW1/skeleton_smash/smash)
==68780==    by 0x5400C17: (below main) (libc-start.c:266)
==68780== 
==68780== Open file descriptor 4: /home/student/Desktop/OS/HW1/skeleton_smash/tests/outputs/test_2020_timeout.out
==68780==    at 0x54EF927: dup (syscall-template.S:78)
==68780==    by 0x110A57: __static_initialization_and_destruction_0(int, int) (smash.cpp:8)
==68780==    by 0x110A83: _GLOBAL__sub_I_stdout_dp (smash.cpp:57)
==68780==    by 0x110AFC: __libc_csu_init (in /home/student/Desktop/OS/HW1/skeleton_smash/smash)
==68780==    by 0x5400C17: (below main) (libc-start.c:266)
==68780== 
==68780== Open file descriptor 3: /home/student/Desktop/OS/HW1/skeleton_smash/tests/outputs/test_2020_timeout.valgrind
==68780==    <inherited from parent>
==68780== 
==68780== Open file descriptor 2: /home/student/Desktop/OS/HW1/skeleton_smash/tests/outputs/test_2020_timeout.err
==68780==    <inherited from parent>
==68780== 
==68780== 
==68780== HEAP SUMMARY:
==68780==     in use at exit: 55 bytes in 3 blocks
==68780==   total heap usage: 249 allocs, 246 frees, 91,306 bytes allocated
==68780== 
==68780== 15 bytes in 1 blocks are still reachable in loss record 1 of 3
==68780==    at 0x4C3289F: operator new[](unsigned long) (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==68780==    by 0x10CF2E: ChangeDirCommand::execute() (Commands.cpp:459)
==68780==    by 0x10F120: SmallShell::executeCommand(char const*) (Commands.cpp:916)
==68780==    by 0x1109A1: main (smash.cpp:51)
==68780== 
==68780== 24 bytes in 1 blocks are indirectly lost in loss record 2 of 3
==68780==    at 0x4C3217F: operator new(unsigned long) (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==68780==    by 0x10E0BD: JobsList::JobsList() (Commands.cpp:707)
==68780==    by 0x10EB3C: SmallShell::SmallShell() (Commands.cpp:860)
==68780==    by 0x110752: SmallShell::getInstance() (Commands.h:233)
==68780==    by 0x110824: main (smash.cpp:21)
==68780== 
==68780== 40 (16 direct, 24 indirect) bytes in 1 blocks are definitely lost in loss record 3 of 3
==68780==    at 0x4C3217F: operator new(unsigned long) (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==68780==    by 0x10EB31: SmallShell::SmallShell() (Commands.cpp:860)
==68780==    by 0x110752: SmallShell::getInstance() (Commands.h:233)
==68780==    by 0x110824: main (smash.cpp:21)
==68780== 
==68780== LEAK SUMMARY:
==68780==    definitely lost: 16 bytes in 1 blocks
==68780==    indirectly lost: 24 bytes in 1 blocks
==68780==      possibly lost: 0 bytes in 0 blocks
==68780==    still reachable: 15 bytes in 1 blocks
==68780==         suppressed: 0 bytes in 0 blocks
==68780== 
==68780== For counts of detected and suppressed errors, rerun with: -v
==68780== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
